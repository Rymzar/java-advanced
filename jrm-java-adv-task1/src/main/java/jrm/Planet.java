package jrm;

import java.util.Date;

/**
 * Класс Planet это неизменяемый класс.
 */
public final class Planet {

    /**
     * Примитив объявленный как final всегда неизменяем
     */
    private final double mass;

    /**
     * Объект типа String по умолчанию неизменяем
     */
    private final String name;

    /**
     * Изменяемый объект. Объект может быть изменен по ссылке.Требуется защитная копия
     */
    private final Date dateOfDiscovery;

    public Planet (double mass, String name, Date dateOfDiscovery) {
        this.mass = mass;
        this.name = name;
        //защитная копия
        this.dateOfDiscovery = new Date(dateOfDiscovery.getTime());
    }

    /**
     * Возвращает примитивное число.
     *
     * Пользовтаель может делать все что захочет с возвращаемым объектом. Это не окажет никакого
     * влияния на неизменяемый объект. Потомучто это примитивное значение.И пользователь будет работать со
     * своей копией double переменной.
     */
    public double getMass() {
        return mass;
    }

    /**
     * Возвращает не изменяемый объект
     * Можно не беспокоится.Строка по умолчанию является не изменяемым объектом.
     */
    public String getName() {
        return name;
    }


    // ОБРАТИТЕ ВНИМАНИЕ НАСЛЕДУЮЩИЙ КОД, КОТОРЫЙ ЗАКОМЕНТИРОВАН

//  /**
//  * Возвращает изменяемый объект
//  * Предоставляем ссыку на объект в памяти. Внашем случае это опасно. Так как мы можем изменить
//  * объект по ссылке, как только получим его с помощью метода getDateOfDiscovery().
//  * Не делайте так! Если проектируете класс, объекты которого должны быть не изменяемы.

//  public Date getDateOfDiscovery() {
//    return dateOfDiscovery;
//  }

    /**
     * Возвращать изменяемый объект обернутый в копию - отличное решение!
     * Вернет защитную копию поля класса dateOfDiscovery. Почему это безопасно?
     * Потомучто даже если кто-то будет пытаться менять возвращаемое значение,это не окажет
     * ни какого влияния на наше поле dateOfDiscovery, так как вызывая метод get создается другой объект,
     * совсем в другом участке памяти
     */
    public Date getDateOfDiscovery() {
        return new Date(dateOfDiscovery.getTime());
    }
}